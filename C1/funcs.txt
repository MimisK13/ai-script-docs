void AddMoveAroundDesire(int time, float value);
void AddDoNothingDesire(int time, float value);
void AddAttackDesire(CSharedCreatureData* target, int actionMoveType, float value);
void AddAttackDesireEx(uint32_t targetSID, int actionMoveType, bool force, float value);
void AddGetItemDesire(CSharedItemData* item, float value);
void AddChaseDesire(CSharedCreatureData* target, float value);
void AddFleeDesire(CSharedCreatureData* from, float value);
void AddFollowDesire(CSharedCreatureData* commander, float value);
void AddDecayingDesire(float value);
void AddMoveToWayPointDesire(const WayPoints* waypoints, const WayPointDelays* waypointDelays, int index, float value);
void AddUseSkillDesire(CSharedCreatureData* target, int skillNameID, int skillType, int actionMoveType, float value);
void AddUseSkillDesireEx(uint32_t targetSID, int skillNameID, int skillType, int actionMoveType, bool force, float value);
void AddMoveToDesire(int x, int y, int z, float value);
void AddEffectActionDesire(CSharedCreatureData* target, int method, int time, float value);
void AddPetDefaultDesire_Follow(float value);
void RemoveAllAttackDesire();
void RemoveAttackDesire(uint32_t targetSID);
void RandomizeAttackDesire();
void MakeAttackEvent(CSharedCreatureData* attacker, float damage, bool partyEvent);
float GetTopDesireValue();
int GetLifeTime();
int GetTick();
int IsSameString(const wchar_t* s1, const wchar_t* s2);
int GetCurrentTick();
int GetDirection(CSharedCreatureData* creature);
void SetCookie(CSharedCreatureData* creature, const wchar_t* key, int value);
int GetCookie(CSharedCreatureData* creature, const wchar_t* key);
void SetTeleportPosOnLost(int x, int y, int z);
void AddTimerEx(int id, int msec);
int GetIndexFromCreature(CSharedCreatureData* creature);
CSharedCreatureData* GetCreatureFromIndex(int index);
void RegisterGlobalMap(int key, int value);
int UnregisterGlobalMap(int key);
int GetGlobalMap(int key);
void SendScriptEvent(CSharedCreatureData* to, int arg1, int arg2);
void ReportDesire();
int IsSpoiled();
void Say(const wchar_t* msg);
void SayInt(int value);
void SayFloat(float value);
int EquipItem(int itemId);
int Talk(CSharedCreatureData* target, const wchar_t* script);
int Shout(const wchar_t* script);
float DistFromMe(CSharedCreatureData* target);
void SetTimerPeriodByTick(int tick);
void SetTimerPeriod(int sec);
int GetWayPointDelay(const WayPointDelays* wayPointDelays, int index);
int Rand(int max);
const wchar_t* IntToStr(int number);
int FloatToInt(float number);
void ShowPage(CSharedCreatureData* to, const wchar_t* file);
void ShowSystemMessage(CSharedCreatureData* to, int messageID);
void Teleport(CSharedCreatureData* talker, CTeleportPositionList* telposlist, const wchar_t* byePage, const wchar_t* classMissMatchPage, const wchar_t* underAdenaPage, const wchar_t* teleportName);
void InstantTeleport(CSharedCreatureData* creature, int x, int y, int z);
void Sell(CSharedCreatureData* talker, CBuySellList* buySellList, const wchar_t* shopname, const wchar_t* sellPage, const wchar_t* underAdenaPage, const wchar_t* unableItemSell);
void Buy(CSharedCreatureData* talker, CBuySellList* buySellList, const wchar_t* shopname, const wchar_t* buyPage, const wchar_t* unableItemBuy, float fRatio);
int IsAlive(CSharedCreatureData* creature);
float HPRatio(CSharedCreatureData* creature);
CSharedCreatureData* GetLastAttacker();
int GiveItem1(CSharedCreatureData* creature, int itemClassID, int count);
int GiveItem2(CSharedCreatureData* creature, int item1ClassID, int item1Count, int item2ClassID, int item2Count);
int GiveItem3(CSharedCreatureData* creature, int item1ClassID, int item1Count, int item2ClassID, int item2Count, int item3ClassID, int item3Count);
int DeleteItem1(CSharedCreatureData* talker, int itemClassID, int count);
int OwnItemCount(CSharedCreatureData* creature, int itemClassID);
void AtomicDelete3Give1Item(CSharedCreatureData* creature, int delItem1ClassID, int delItem1Count, int delItem2ClassID, int delItem2Count, int delItem3ClassID, int delItem3Count, int giveItemId, int giveItemCount);
int GetOneTimeQuestFlag(CSharedCreatureData* creature, int questID);
void SetOneTimeQuestFlag(CSharedCreatureData* creature, int questID, int flag);
void SetJournal(CSharedCreatureData* creature, int questID, int journalID);
int GetMemoCount(CSharedCreatureData* creature);
int HaveMemo(CSharedCreatureData* creature, int questID);
int SetMemo(CSharedCreatureData* talker, int questID);
int SetMemoState(CSharedCreatureData* talker, int questID, int state);
int GetMemoState(CSharedCreatureData* talker, int questID);
int RemoveMemo(CSharedCreatureData* talker, int questID);
int GetAbnormalLevel(CSharedCreatureData* creature, int abnormalType);
void SetDBValue(CSharedCreatureData* creature, int value);
int Party_GetCount(CSharedCreatureData* creature);
CSharedCreatureData* Party_GetCreature(CSharedCreatureData* partyMember, int index);
CSharedCreatureData* Party_GetLeader(CSharedCreatureData* partyMember);
int Pledge_GetCount(CSharedCreatureData* pledgeMember);
CSharedCreatureData* Pledge_GetCreature(CSharedCreatureData* pledgeMember, int index);
CSharedCreatureData* Pledge_GetLeader(CSharedCreatureData* pledgeMember);
CSharedPartyData* GetParty(CSharedCreatureData* partyMember);
CSharedPledgeData* GetPledge(CSharedCreatureData* pledgeMember);
void FHTML_SetFileName(CFHTML* html, const wchar_t* fileName);
void FHTML_SetInt(CFHTML* html, const wchar_t* varName, int value);
void FHTML_SetFloat(CFHTML* html, const wchar_t* varName, float value);
void FHTML_SetStr(CFHTML* html, const wchar_t* varName, const wchar_t* value);
void ShowFHTML(CSharedCreatureData* sharedCreatureData, CFHTML* html);
const wchar_t* MakeFString(int index, const wchar_t* s1, const wchar_t* s2, const wchar_t* s3, const wchar_t* s4, const wchar_t* s5);
int IsWaitingDismiss(CSharedCreatureData* pledgeMember);
int GetPledgeSkillLevel(CSharedCreatureData* pledgeMember);
void RegisterSiege(CSharedCreatureData* talker);
void RegisterSiegeDefender(CSharedCreatureData* talker);
void UnregisterSiege(CSharedCreatureData* talker);
void ShowSetSiegeTime(CSharedCreatureData* talker, const wchar_t* setSiegeTime, const wchar_t* siegeTimeSettingExpired, const wchar_t* cantResetSiegeTime);
const wchar_t* PrepareSiegeTime(int satSun, int beforeAfterNoon, int second, int minute);
void ViewSiegeList(CSharedCreatureData* talker, const wchar_t* hiPage);
void ApproveBattle(CSharedCreatureData* talker, const wchar_t* hiMsg);
void CheckSiege(CSharedCreatureData* talker);
int IsMyLord(CSharedCreatureData* talker);
const wchar_t* Castle_GetPledgeName();
const wchar_t* Castle_GetOwnerName();
const wchar_t* Castle_GetSiegeTime();
int Residence_GetTaxRate();
int Residence_GetTaxRateCurrent();
void Residence_SetTaxRate(int taxRate);
int Residence_GetChildTaxRate();
void Residence_SetVaultEmpty(int arg_1);
void Residence_SetChildTaxRate(int taxRate);
void Residence_SetChildTaxRateEach(int arg_1, int arg_2);
void Residence_VaultTakeOutMoney(CSharedCreatureData* arg_1, int arg_2);
int Castle_IsGateOpen();
void Castle_SetSiegeTime(int satSun, int beforeAfterNoon, int hour, int min);
void Castle_GateOpenClose(int openclose);
int Castle_GetPledgeState(CSharedCreatureData* talker);
int Castle_IsUnderSiege();
int Castle_GetHPRegen();
int Castle_GetMPRegen();
void Castle_BanishOthers();
void Castle_SetHPRegen(int hpRegen);
void Castle_SetMPRegen(int mpRegen);
int Castle_GetRawSiegeTime();
int Castle_GetRawSystemTime();
int Castle_IsUnderSiege2(int residenceId);
void Castle_GateOpenClose2(const wchar_t* doorName, int openclose);
int Castle_GetPledgeId();
int Castle_GetLifeControlLevel();
void Agit_SetMaster(CSharedCreatureData* arg_1);
int Agit_GetTeleportLevel();
void Agit_SetTeleportLevel(int teleportLevel);
void AddChoice(int code, const wchar_t* message);
void ShowChoicePage(CSharedCreatureData* to, int choice);
void ShowSkillList(CSharedCreatureData* to, const wchar_t* byePage);
void ShowGrowSkillMessage(CSharedCreatureData* talker, int skillNameID, const wchar_t* afterGrow);
void ShowGrowSkillMessage2(CSharedCreatureData* talker, int skillNameID, int questID, int questItemID, const wchar_t* afterGrow);
void ShowRedirectMessage(CSharedCreatureData* creature, int message);
int IsRedirect(const RedirectInfoList* redirectList, int skillNameID);
int GetRedirectMessage(const RedirectInfoList* redirectList, int skillNameID);
void ShowQuestSuggestion(CSharedCreatureData* creature, int skillNameID, int questID, int questMessage);
int SkillQuest_GetQuestID(SkillQuestInfoList* skillQuest, int skillNameID);
int SkillQuest_GetQuestItemID(SkillQuestInfoList* skillQuest, int skillNameID);
int SkillQuest_GetQuestMessage(SkillQuestInfoList* skillQuest, int skillNameID);
int IsInCategory(int categoryId, int classId);
int ClassChange(CSharedCreatureData* talker, int classType);
void IncrementParam(CSharedCreatureData* creature, int type, float value);
int Skill_GetTargetType(int skillNameID);
int Skill_GetConsumeMP(int skillNameID);
int Skill_GetConsumeHP(int skillNameID);
int Skill_GetEffectPoint(int skillNameID);
int Skill_GetAttribute(int skillNameID);
int Skill_GetAbnormalType(int skillNameID);
int Skill_GetAbnormalLevel(int skillNameID);
int Skill_InReuseDelay(int skillNameID);
int UseSkill(CSharedCreatureData* creature, int skillNameID);
int UseCategorySkill(CSharedCreatureData* creature, int categoryID);
int UseItem(int itemNameId);
int UseCategoryItem(int categoryID);
void EnableTimeEvent(int time);
void CreatePrivates(const wchar_t* privates);
void CreateOnePrivate(int privateClassId, const wchar_t* ai, int privateWeightPoint, int respawnTime);
int Maker_GetNpcCount();
CSharedCreatureData* Maker_FindNpcByKey(int key);
int CreateOnePrivateEx(int privateClassId, const wchar_t* ai, int privateWeightPoint, int respawnTime, int x, int y, int z, int direction, int arg_9, int arg_10);
int SetWeightPoint(CSharedCreatureData* creature, int weightPoint);
void SoundEffect(CSharedCreatureData* to, const wchar_t* soundFile);
void EffectMusic(CSharedCreatureData* to, int dist, const wchar_t* musicFile);
void Despawn();
void EnableMakingSeeEvent();
int InMyTerritory(CSharedCreatureData* creature);
void InstantTeleportInMyTerritory(int x, int y, int z, int range);
float Dist(CSharedCreatureData* from, CSharedCreatureData* to);
void EarthQuakeByNPC(CSharedCreatureData* creature, int force, int duration, int left, int right, int up, int down);
void SpecialCamera(CSharedCreatureData* to, int force, int angle1, int angle2, int time, int range, int duration);
void SpecialCameraEx(CSharedCreatureData* creature, CSharedCreatureData* talker, int force, int angle1, int angle2, int time, int duration);
void PledgeLevelUp(CSharedCreatureData* talker, int pledgeLevel);
const wchar_t* PledgeName(int pledgeIndex);
int Castle_GetCropRate(int itemClassId);
int Castle_GetCropPrice(int itemClassId);
int Castle_GetCropIncome();
int Residence_GetTaxIncome();
void Castle_SetCropPrice(int itemID, int price);
void Castle_SetCropDrop(int itemID, int delta, int price, int level);
void Castle_DeleteCropDrop(int itemID);
void Castle_PostCropPurchase(CSharedCreatureData* talker, int itemID, int count);
void ShowTutorialHTML(CSharedCreatureData* to, const wchar_t* htmlFileName);
void ShowTutorialHTML2(CSharedCreatureData* to, const wchar_t* htmlFileName, int sec, const wchar_t* soundFile);
void ShowQuestionMark(CSharedCreatureData* creature, int id);
void ShowQuestionMark2(CSharedCreatureData* target, int id, int sec);
void CloseTutorialHTML(CSharedCreatureData* talker);
void EnableTutorialEvent(CSharedCreatureData* to, int eventSet);
void ShowRadar(CSharedCreatureData* to, int x, int y, int z);
void DeleteRadar(CSharedCreatureData* talker, int x, int y, int z);
void CreatePet(CSharedCreatureData* talker, int petCollarClassID, int petNpcClassID);
void AgitAuction(CSharedCreatureData* creature, int auctionType);
int GetAgitDeposit(int agitId);
int GetPledgeMoney(CSharedCreatureData* pledgeMember);
const wchar_t* SubStr(const wchar_t* source, int index, int length);
int StrToInt(const wchar_t* str);
void OpenSiegeInfo(CSharedCreatureData* talker);
void SetDoorHpLevel(const wchar_t* doorName, int hpLevel);
void GetDoorHpLevel(CSharedCreatureData* talker, const wchar_t* doorName);
void SetControlTowerLevel(const wchar_t* controlTowerName, int level);
void GetControlTowerLevel(CSharedCreatureData* talker, const wchar_t* controlTowerName);
